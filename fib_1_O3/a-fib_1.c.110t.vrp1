
;; Function fib (fib, funcdef_no=40, decl_uid=3180, cgraph_uid=41, symbol_order=40)

;; 10 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
;;
;; Loop 1
;;  header 3, latch 7
;;  depth 1, outer 0
;;  nodes: 3 7 6 5 10 9 8 13 12 11 16 15 14 19 18 17 22 21 20 25 24 23 28 27 26 29
;;
;; Loop 2
;;  header 6, latch 10
;;  depth 2, outer 1
;;  nodes: 6 10 9 8 13 12 11 16 15 14 19 18 17 22 21 20 25 24 23 28 27 26 29
;;
;; Loop 3
;;  header 9, latch 13
;;  depth 3, outer 2
;;  nodes: 9 13 12 11 16 15 14 19 18 17 22 21 20 25 24 23 28 27 26 29
;;
;; Loop 4
;;  header 12, latch 16
;;  depth 4, outer 3
;;  nodes: 12 16 15 14 19 18 17 22 21 20 25 24 23 28 27 26 29
;;
;; Loop 5
;;  header 15, latch 19
;;  depth 5, outer 4
;;  nodes: 15 19 18 17 22 21 20 25 24 23 28 27 26 29
;;
;; Loop 6
;;  header 18, latch 22
;;  depth 6, outer 5
;;  nodes: 18 22 21 20 25 24 23 28 27 26 29
;;
;; Loop 7
;;  header 21, latch 25
;;  depth 7, outer 6
;;  nodes: 21 25 24 23 28 27 26 29
;;
;; Loop 8
;;  header 24, latch 28
;;  depth 8, outer 7
;;  nodes: 24 28 27 26 29
;;
;; Loop 9
;;  header 27, latch 29
;;  depth 9, outer 8
;;  nodes: 27 29
;; 2 succs { 3 }
;; 3 succs { 4 5 }
;; 4 succs { 1 }
;; 5 succs { 6 }
;; 6 succs { 7 8 }
;; 7 succs { 3 }
;; 8 succs { 9 }
;; 9 succs { 10 11 }
;; 10 succs { 6 }
;; 11 succs { 12 }
;; 12 succs { 13 14 }
;; 13 succs { 9 }
;; 14 succs { 15 }
;; 15 succs { 16 17 }
;; 16 succs { 12 }
;; 17 succs { 18 }
;; 18 succs { 19 20 }
;; 19 succs { 15 }
;; 20 succs { 21 }
;; 21 succs { 22 23 }
;; 22 succs { 18 }
;; 23 succs { 24 }
;; 24 succs { 25 26 }
;; 25 succs { 21 }
;; 26 succs { 27 }
;; 27 succs { 28 29 }
;; 28 succs { 24 }
;; 29 succs { 27 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

add_acc_36 -> { add_acc_54 }
add_acc_43 -> { add_acc_40 }
add_acc_50 -> { add_acc_26 }
add_acc_57 -> { add_acc_12 }
add_acc_67 -> { add_acc_7 }
add_acc_68 -> { add_acc_19 }
add_acc_69 -> { add_acc_33 }
add_acc_70 -> { add_acc_47 }
add_acc_71 -> { add_acc_61 }
Incremental SSA update started at block: 3
Number of blocks in CFG: 30
Number of blocks to update: 19 ( 63%)



SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

n_2 -> { n_46 }
n_15 -> { n_32 }
n_22 -> { n_18 }
n_29 -> { n_4 }
n_72 -> { n_11 }
n_73 -> { n_25 }
n_74 -> { n_39 }
n_75 -> { n_53 }
n_76 -> { n_60 }
Incremental SSA update started at block: 3
Number of blocks in CFG: 30
Number of blocks to update: 26 ( 87%)



Value ranges after VRP:

_1: int [2, 2147483646]
n_2: int [3, 2147483641]  EQUIVALENCES: { n_46 } (1 elements)
_3: int [1, 2147483645]
n_4: int [-INF, n_5(D)]
n_5(D): int VARYING
add_acc_7: int VARYING
add_acc_8: int VARYING
acc_tmp_9: int [add_acc_7 + 1, add_acc_7 + 1]
.MEM_10: <<< error >>> VARYING
n_11: int [1, 2147483646]
add_acc_12: int VARYING
acc_tmp_13: int [add_acc_12 + 1, add_acc_12 + 1]
_14: int [2, 2147483645]
n_15: int [3, 2147483643]  EQUIVALENCES: { n_32 } (1 elements)
_16: int [1, 2147483644]
add_acc_17: int VARYING
n_18: int [1, 2147483645]
add_acc_19: int VARYING
acc_tmp_20: int [add_acc_19 + 1, add_acc_19 + 1]
_21: int [2, 2147483644]
n_22: int [3, 2147483645]  EQUIVALENCES: { n_18 } (1 elements)
_23: int [1, 2147483643]
add_acc_24: int VARYING
n_25: int [1, 2147483644]
add_acc_26: int VARYING
acc_tmp_27: int [add_acc_26 + 1, add_acc_26 + 1]
_28: int [2, 2147483643]
n_29: int [3, +INF]  EQUIVALENCES: { n_4 } (1 elements)
_30: int [1, 2147483642]
add_acc_31: int VARYING
n_32: int [1, 2147483643]
add_acc_33: int VARYING
acc_tmp_34: int [add_acc_33 + 1, add_acc_33 + 1]
_35: int [2, 2147483642]
add_acc_36: int [add_acc_54, add_acc_54]
_37: int [1, 2147483641]
add_acc_38: int VARYING
n_39: int [1, 2147483642]
add_acc_40: int VARYING
acc_tmp_41: int [add_acc_40 + 1, add_acc_40 + 1]
_42: int [2, 2147483641]
add_acc_43: int [add_acc_40, add_acc_40]
_44: int [1, 2147483640]
add_acc_45: int VARYING
n_46: int [1, 2147483641]
add_acc_47: int VARYING
acc_tmp_48: int [add_acc_47 + 1, add_acc_47 + 1]
_49: int [2, 2147483640]
add_acc_50: int [add_acc_26, add_acc_26]
_51: int [1, 2147483639]
add_acc_52: int VARYING
n_53: int [1, 2147483640]
add_acc_54: int VARYING
acc_tmp_55: int [add_acc_54 + 1, add_acc_54 + 1]
_56: int [2, 2147483639]
add_acc_57: int [add_acc_12, add_acc_12]
_58: int [1, 2147483638]
add_acc_59: int VARYING
n_60: int [1, 2147483639]
add_acc_61: int VARYING
acc_tmp_62: int [add_acc_61 + 1, add_acc_61 + 1]
_63: int [2, 2147483638]
_64: int VARYING
_65: int [1, 2147483637]
add_acc_66: int VARYING
add_acc_67: int [add_acc_7, add_acc_7]
add_acc_68: int [add_acc_19, add_acc_19]
add_acc_69: int [add_acc_33, add_acc_33]
add_acc_70: int [add_acc_47, add_acc_47]
add_acc_71: int [add_acc_61, add_acc_61]
n_72: int [3, 2147483646]  EQUIVALENCES: { n_11 } (1 elements)
n_73: int [3, 2147483644]  EQUIVALENCES: { n_25 } (1 elements)
n_74: int [3, 2147483642]  EQUIVALENCES: { n_39 } (1 elements)
n_75: int [3, 2147483640]  EQUIVALENCES: { n_53 } (1 elements)
n_76: int [3, 2147483639]  EQUIVALENCES: { n_60 } (1 elements)


int fib (int n)
{
  int D.3229;
  int n;
  int D.3227;
  int n;
  int D.3225;
  int n;
  int D.3223;
  int n;
  int D.3221;
  int n;
  int D.3219;
  int n;
  int D.3217;
  int n;
  int D.3215;
  int n;
  int _1;
  int _3;
  int add_acc_7;
  int add_acc_8;
  int acc_tmp_9;
  int add_acc_12;
  int acc_tmp_13;
  int _14;
  int _16;
  int add_acc_17;
  int add_acc_19;
  int acc_tmp_20;
  int _21;
  int _23;
  int add_acc_24;
  int add_acc_26;
  int acc_tmp_27;
  int _28;
  int _30;
  int add_acc_31;
  int add_acc_33;
  int acc_tmp_34;
  int _35;
  int add_acc_36;
  int _37;
  int add_acc_38;
  int add_acc_40;
  int acc_tmp_41;
  int _42;
  int add_acc_43;
  int _44;
  int add_acc_45;
  int add_acc_47;
  int acc_tmp_48;
  int _49;
  int add_acc_50;
  int _51;
  int add_acc_52;
  int add_acc_54;
  int acc_tmp_55;
  int _56;
  int add_acc_57;
  int _58;
  int add_acc_59;
  int add_acc_61;
  int acc_tmp_62;
  int _63;
  int _64;
  int _65;
  int add_acc_66;
  int add_acc_67;
  int add_acc_68;
  int add_acc_69;
  int add_acc_70;
  int add_acc_71;

  <bb 2> [local count: 236223200]:

  <bb 3> [local count: 1073778135]:
  # n_4 = PHI <n_5(D)(2), _3(7)>
  # add_acc_7 = PHI <0(2), add_acc_8(7)>
  if (n_4 <= 2)
    goto <bb 4>; [22.00%]
  else
    goto <bb 5>; [78.00%]

  <bb 4> [local count: 236223200]:
  # add_acc_67 = PHI <add_acc_7(3)>
  acc_tmp_9 = add_acc_67 + 1;
  return acc_tmp_9;

  <bb 5> [local count: 837529967]:
  _1 = n_4 + -1;

  <bb 6> [local count: 3806986174]:
  # n_11 = PHI <_1(5), _16(10)>
  # add_acc_12 = PHI <0(5), add_acc_17(10)>
  if (n_11 <= 2)
    goto <bb 7>; [22.00%]
  else
    goto <bb 8>; [78.00%]

  <bb 7> [local count: 837529967]:
  # add_acc_57 = PHI <add_acc_12(6)>
  acc_tmp_13 = add_acc_57 + 1;
  _3 = n_4 + -2;
  add_acc_8 = add_acc_7 + acc_tmp_13;
  goto <bb 3>; [100.00%]

  <bb 8> [local count: 2969456207]:
  _14 = n_11 + -1;

  <bb 9> [local count: 13497505516]:
  # n_18 = PHI <_14(8), _23(13)>
  # add_acc_19 = PHI <0(8), add_acc_24(13)>
  if (n_18 <= 2)
    goto <bb 10>; [22.00%]
  else
    goto <bb 11>; [78.00%]

  <bb 10> [local count: 2969456207]:
  # add_acc_68 = PHI <add_acc_19(9)>
  acc_tmp_20 = add_acc_68 + 1;
  _16 = n_11 + -2;
  add_acc_17 = add_acc_12 + acc_tmp_20;
  goto <bb 6>; [100.00%]

  <bb 11> [local count: 10528074277]:
  _21 = n_18 + -1;

  <bb 12> [local count: 47854835411]:
  # n_25 = PHI <_21(11), _30(16)>
  # add_acc_26 = PHI <0(11), add_acc_31(16)>
  if (n_25 <= 2)
    goto <bb 13>; [22.00%]
  else
    goto <bb 14>; [78.00%]

  <bb 13> [local count: 10528074277]:
  # add_acc_50 = PHI <add_acc_26(12)>
  acc_tmp_27 = add_acc_50 + 1;
  _23 = n_18 + -2;
  add_acc_24 = add_acc_19 + acc_tmp_27;
  goto <bb 9>; [100.00%]

  <bb 14> [local count: 37326761134]:
  _28 = n_25 + -1;

  <bb 15> [local count: 169667107413]:
  # n_32 = PHI <_28(14), _37(19)>
  # add_acc_33 = PHI <0(14), add_acc_38(19)>
  if (n_32 <= 2)
    goto <bb 16>; [22.00%]
  else
    goto <bb 17>; [78.00%]

  <bb 16> [local count: 37326761134]:
  # add_acc_69 = PHI <add_acc_33(15)>
  acc_tmp_34 = add_acc_69 + 1;
  _30 = n_25 + -2;
  add_acc_31 = add_acc_26 + acc_tmp_34;
  goto <bb 12>; [100.00%]

  <bb 17> [local count: 132340346279]:
  _35 = n_32 + -1;

  <bb 18> [local count: 601547060319]:
  # n_39 = PHI <_35(17), _44(22)>
  # add_acc_40 = PHI <0(17), add_acc_45(22)>
  if (n_39 <= 2)
    goto <bb 19>; [22.00%]
  else
    goto <bb 20>; [78.00%]

  <bb 19> [local count: 132340346279]:
  # add_acc_43 = PHI <add_acc_40(18)>
  acc_tmp_41 = add_acc_43 + 1;
  _37 = n_32 + -2;
  add_acc_38 = add_acc_33 + acc_tmp_41;
  goto <bb 15>; [100.00%]

  <bb 20> [local count: 469206689072]:
  _42 = n_39 + -1;

  <bb 21> [local count: 2132757727535]:
  # n_46 = PHI <_42(20), _51(25)>
  # add_acc_47 = PHI <0(20), add_acc_52(25)>
  if (n_46 <= 2)
    goto <bb 22>; [22.00%]
  else
    goto <bb 23>; [78.00%]

  <bb 22> [local count: 469206689072]:
  # add_acc_70 = PHI <add_acc_47(21)>
  acc_tmp_48 = add_acc_70 + 1;
  _44 = n_39 + -2;
  add_acc_45 = add_acc_40 + acc_tmp_48;
  goto <bb 18>; [100.00%]

  <bb 23> [local count: 1663551038463]:
  _49 = n_46 + -1;

  <bb 24> [local count: 7561595665695]:
  # n_53 = PHI <_49(23), _58(28)>
  # add_acc_54 = PHI <0(23), add_acc_59(28)>
  if (n_53 <= 2)
    goto <bb 25>; [22.00%]
  else
    goto <bb 26>; [78.00%]

  <bb 25> [local count: 1663551038463]:
  # add_acc_36 = PHI <add_acc_54(24)>
  acc_tmp_55 = add_acc_36 + 1;
  _51 = n_46 + -2;
  add_acc_52 = add_acc_47 + acc_tmp_55;
  goto <bb 21>; [100.00%]

  <bb 26> [local count: 5898044627232]:
  _56 = n_53 + -1;

  <bb 27> [local count: 26809293905413]:
  # n_60 = PHI <_56(26), _65(29)>
  # add_acc_61 = PHI <0(26), add_acc_66(29)>
  if (n_60 <= 2)
    goto <bb 28>; [22.00%]
  else
    goto <bb 29>; [78.00%]

  <bb 28> [local count: 5898044627232]:
  # add_acc_71 = PHI <add_acc_61(27)>
  acc_tmp_62 = add_acc_71 + 1;
  _58 = n_53 + -2;
  add_acc_59 = add_acc_54 + acc_tmp_62;
  goto <bb 24>; [100.00%]

  <bb 29> [local count: 212603377]:
  _63 = n_60 + -1;
  _64 = fib (_63);
  _65 = n_60 + -2;
  add_acc_66 = add_acc_61 + _64;
  goto <bb 27>; [100.00%]

}



;; Function main (main, funcdef_no=39, decl_uid=3181, cgraph_uid=40, symbol_order=39) (executed once)

;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8
;;
;; Loop 1
;;  header 3, latch 7
;;  depth 1, outer 0
;;  nodes: 3 7 6 5 8
;;
;; Loop 2
;;  header 6, latch 8
;;  depth 2, outer 1
;;  nodes: 6 8
;; 2 succs { 3 }
;; 3 succs { 4 5 }
;; 4 succs { 1 }
;; 5 succs { 6 }
;; 6 succs { 7 8 }
;; 7 succs { 3 }
;; 8 succs { 6 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

add_acc_10 -> { add_acc_16 }
add_acc_22 -> { add_acc_7 }
Incremental SSA update started at block: 3
Number of blocks in CFG: 9
Number of blocks to update: 5 ( 56%)



SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

n_13 -> { n_6 }
n_23 -> { n_15 }
Incremental SSA update started at block: 3
Number of blocks in CFG: 9
Number of blocks to update: 5 ( 56%)



Value ranges after VRP:

n.0_1: int VARYING
n_6: int [-INF, n.0_1]
add_acc_7: int VARYING
acc_tmp_8: int [add_acc_7 + 1, add_acc_7 + 1]
_9: int [2, 2147483646]
add_acc_10: int [add_acc_16, add_acc_16]
_11: int [1, 2147483645]
add_acc_12: int VARYING
n_13: int [3, +INF]  EQUIVALENCES: { n_6 } (1 elements)
n_15: int [1, 2147483646]
add_acc_16: int VARYING
acc_tmp_17: int [add_acc_16 + 1, add_acc_16 + 1]
_18: int [2, 2147483645]
_19: int VARYING
_20: int [1, 2147483644]
add_acc_21: int VARYING
add_acc_22: int [add_acc_7, add_acc_7]
n_23: int [3, 2147483646]  EQUIVALENCES: { n_15 } (1 elements)


int main ()
{
  int D.3307;
  int n;
  int n;
  int n;
  int n.0_1;
  int add_acc_7;
  int acc_tmp_8;
  int _9;
  int add_acc_10;
  int _11;
  int add_acc_12;
  int add_acc_16;
  int acc_tmp_17;
  int _18;
  int _19;
  int _20;
  int add_acc_21;
  int add_acc_22;

  <bb 2> [local count: 236223200]:
  n = 0;
  scanf ("%d", &n);
  n.0_1 = n;

  <bb 3> [local count: 1073741823]:
  # n_6 = PHI <n.0_1(2), _11(7)>
  # add_acc_7 = PHI <0(2), add_acc_12(7)>
  if (n_6 <= 2)
    goto <bb 4>; [22.00%]
  else
    goto <bb 5>; [78.00%]

  <bb 4> [local count: 236223200]:
  # add_acc_22 = PHI <add_acc_7(3)>
  acc_tmp_8 = add_acc_22 + 1;
  __printf_chk (1, "%d\n", acc_tmp_8);
  n ={v} {CLOBBER};
  return 0;

  <bb 5> [local count: 837518623]:
  _9 = n_6 + -1;

  <bb 6> [local count: 3806902854]:
  # n_15 = PHI <_9(5), _20(8)>
  # add_acc_16 = PHI <0(5), add_acc_21(8)>
  if (n_15 <= 2)
    goto <bb 7>; [22.00%]
  else
    goto <bb 8>; [78.00%]

  <bb 7> [local count: 837518623]:
  # add_acc_10 = PHI <add_acc_16(6)>
  acc_tmp_17 = add_acc_10 + 1;
  _11 = n_6 + -2;
  add_acc_12 = add_acc_7 + acc_tmp_17;
  goto <bb 3>; [100.00%]

  <bb 8> [local count: 2969384231]:
  _18 = n_15 + -1;
  _19 = fib (_18);
  _20 = n_15 + -2;
  add_acc_21 = add_acc_16 + _19;
  goto <bb 6>; [100.00%]

}


